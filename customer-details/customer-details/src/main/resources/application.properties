spring.application.name=customer-details
server.port=9000
# MySQL configuration
# Database connection
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useSSL=true&requireSSL=true
spring.datasource.username=root
spring.datasource.password=mysql123456

# SSL Configuration
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.open-in-view=false

# Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Redis Configuration
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password= # Optional if your Redis instance is secured
spring.redis.jedis.pool.max-idle=10
spring.redis.jedis.pool.min-idle=2
spring.redis.jedis.pool.max-total=10
spring.cache.type=redis

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true


logging.level.org.springframework=DEBUG
logging.level.com.zaxxer.hikari=DEBUG



# Retry Configuration
resilience4j.retry.instances.createCustomerRetry.max-attempts=3
resilience4j.retry.instances.createCustomerRetry.wait-duration=2s

resilience4j.retry.instances.getCustomerByIdRetry.max-attempts=3
resilience4j.retry.instances.getCustomerByIdRetry.wait-duration=1s

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.createCustomerCircuitBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.createCustomerCircuitBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.createCustomerCircuitBreaker.wait-duration-in-open-state=5s

resilience4j.circuitbreaker.instances.getCustomerByIdCircuitBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.getCustomerByIdCircuitBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.getCustomerByIdCircuitBreaker.wait-duration-in-open-state=5s

